#include <iostream>
#include <cmath>

struct Point {
    double x, y;
    Point(double _x, double _y) : x(_x), y(_y) {}
};

struct Triangle {
    Point p1, p2, p3;
    Triangle(Point _p1, Point _p2, Point _p3) : p1(_p1), p2(_p2), p3(_p3) {}
};

bool isPointOnEdge(Point p, Point start, Point end) {
    double crossProduct = (p.x - start.x) * (end.y - start.y) - (p.y - start.y) * (end.x - start.x);
    if (std::abs(crossProduct) > 1e-9) { // Check for floating-point precision
        return false;
    }
    double dotProduct = (p.x - start.x) * (end.x - start.x) + (p.y - start.y) * (end.y - start.y);
    if (dotProduct < 0) {
        return false;
    }
    double squaredLength = (end.x - start.x) * (end.x - start.x) + (end.y - start.y) * (end.y - start.y);
    if (dotProduct > squaredLength) {
        return false;
    }
    return true;
}

bool isPointOnTriangleEdge(Point p, Triangle t) {
    return isPointOnEdge(p, t.p1, t.p2) || isPointOnEdge(p, t.p2, t.p3) || isPointOnEdge(p, t.p3, t.p1);
}

int main() {
    Point p(3, 4); // Nokta
    Triangle triangle(Point(1, 2), Point(3, 4), Point(6, 7)); // Üçgen

    if (isPointOnTriangleEdge(p, triangle)) {
        std::cout << "Nokta üçgenin kenarında veya köşesinde bulunuyor." << std::endl;
    } else {
        std::cout << "Nokta üçgenin kenarında veya köşesinde değil." << std::endl;
    }

    return 0;
}
